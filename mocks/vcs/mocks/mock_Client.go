// Code generated by mockery v2.46.3. DO NOT EDIT.

package vcs

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msg "github.com/zapier/kubechecks/pkg/msg"

	pkg "github.com/zapier/kubechecks/pkg"

	vcs "github.com/zapier/kubechecks/pkg/vcs"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CommitStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClient) CommitStatus(_a0 context.Context, _a1 vcs.PullRequest, _a2 pkg.CommitState) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CommitStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vcs.PullRequest, pkg.CommitState) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CommitStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitStatus'
type MockClient_CommitStatus_Call struct {
	*mock.Call
}

// CommitStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 vcs.PullRequest
//   - _a2 pkg.CommitState
func (_e *MockClient_Expecter) CommitStatus(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockClient_CommitStatus_Call {
	return &MockClient_CommitStatus_Call{Call: _e.mock.On("CommitStatus", _a0, _a1, _a2)}
}

func (_c *MockClient_CommitStatus_Call) Run(run func(_a0 context.Context, _a1 vcs.PullRequest, _a2 pkg.CommitState)) *MockClient_CommitStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vcs.PullRequest), args[2].(pkg.CommitState))
	})
	return _c
}

func (_c *MockClient_CommitStatus_Call) Return(_a0 error) *MockClient_CommitStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CommitStatus_Call) RunAndReturn(run func(context.Context, vcs.PullRequest, pkg.CommitState) error) *MockClient_CommitStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateHook provides a mock function with given fields: ctx, repoName, webhookUrl, webhookSecret
func (_m *MockClient) CreateHook(ctx context.Context, repoName string, webhookUrl string, webhookSecret string) error {
	ret := _m.Called(ctx, repoName, webhookUrl, webhookSecret)

	if len(ret) == 0 {
		panic("no return value specified for CreateHook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, repoName, webhookUrl, webhookSecret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHook'
type MockClient_CreateHook_Call struct {
	*mock.Call
}

// CreateHook is a helper method to define mock.On call
//   - ctx context.Context
//   - repoName string
//   - webhookUrl string
//   - webhookSecret string
func (_e *MockClient_Expecter) CreateHook(ctx interface{}, repoName interface{}, webhookUrl interface{}, webhookSecret interface{}) *MockClient_CreateHook_Call {
	return &MockClient_CreateHook_Call{Call: _e.mock.On("CreateHook", ctx, repoName, webhookUrl, webhookSecret)}
}

func (_c *MockClient_CreateHook_Call) Run(run func(ctx context.Context, repoName string, webhookUrl string, webhookSecret string)) *MockClient_CreateHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_CreateHook_Call) Return(_a0 error) *MockClient_CreateHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateHook_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockClient_CreateHook_Call {
	_c.Call.Return(run)
	return _c
}

// Email provides a mock function with given fields:
func (_m *MockClient) Email() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Email")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_Email_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Email'
type MockClient_Email_Call struct {
	*mock.Call
}

// Email is a helper method to define mock.On call
func (_e *MockClient_Expecter) Email() *MockClient_Email_Call {
	return &MockClient_Email_Call{Call: _e.mock.On("Email")}
}

func (_c *MockClient_Email_Call) Run(run func()) *MockClient_Email_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Email_Call) Return(_a0 string) *MockClient_Email_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Email_Call) RunAndReturn(run func() string) *MockClient_Email_Call {
	_c.Call.Return(run)
	return _c
}

// GetHookByUrl provides a mock function with given fields: ctx, repoName, webhookUrl
func (_m *MockClient) GetHookByUrl(ctx context.Context, repoName string, webhookUrl string) (*vcs.WebHookConfig, error) {
	ret := _m.Called(ctx, repoName, webhookUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetHookByUrl")
	}

	var r0 *vcs.WebHookConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*vcs.WebHookConfig, error)); ok {
		return rf(ctx, repoName, webhookUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *vcs.WebHookConfig); ok {
		r0 = rf(ctx, repoName, webhookUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vcs.WebHookConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repoName, webhookUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetHookByUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHookByUrl'
type MockClient_GetHookByUrl_Call struct {
	*mock.Call
}

// GetHookByUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - repoName string
//   - webhookUrl string
func (_e *MockClient_Expecter) GetHookByUrl(ctx interface{}, repoName interface{}, webhookUrl interface{}) *MockClient_GetHookByUrl_Call {
	return &MockClient_GetHookByUrl_Call{Call: _e.mock.On("GetHookByUrl", ctx, repoName, webhookUrl)}
}

func (_c *MockClient_GetHookByUrl_Call) Run(run func(ctx context.Context, repoName string, webhookUrl string)) *MockClient_GetHookByUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetHookByUrl_Call) Return(_a0 *vcs.WebHookConfig, _a1 error) *MockClient_GetHookByUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetHookByUrl_Call) RunAndReturn(run func(context.Context, string, string) (*vcs.WebHookConfig, error)) *MockClient_GetHookByUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockClient) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockClient_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetName() *MockClient_GetName_Call {
	return &MockClient_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockClient_GetName_Call) Run(run func()) *MockClient_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetName_Call) Return(_a0 string) *MockClient_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetName_Call) RunAndReturn(run func() string) *MockClient_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// LoadHook provides a mock function with given fields: ctx, repoAndId
func (_m *MockClient) LoadHook(ctx context.Context, repoAndId string) (vcs.PullRequest, error) {
	ret := _m.Called(ctx, repoAndId)

	if len(ret) == 0 {
		panic("no return value specified for LoadHook")
	}

	var r0 vcs.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (vcs.PullRequest, error)); ok {
		return rf(ctx, repoAndId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) vcs.PullRequest); ok {
		r0 = rf(ctx, repoAndId)
	} else {
		r0 = ret.Get(0).(vcs.PullRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repoAndId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_LoadHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadHook'
type MockClient_LoadHook_Call struct {
	*mock.Call
}

// LoadHook is a helper method to define mock.On call
//   - ctx context.Context
//   - repoAndId string
func (_e *MockClient_Expecter) LoadHook(ctx interface{}, repoAndId interface{}) *MockClient_LoadHook_Call {
	return &MockClient_LoadHook_Call{Call: _e.mock.On("LoadHook", ctx, repoAndId)}
}

func (_c *MockClient_LoadHook_Call) Run(run func(ctx context.Context, repoAndId string)) *MockClient_LoadHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_LoadHook_Call) Return(_a0 vcs.PullRequest, _a1 error) *MockClient_LoadHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_LoadHook_Call) RunAndReturn(run func(context.Context, string) (vcs.PullRequest, error)) *MockClient_LoadHook_Call {
	_c.Call.Return(run)
	return _c
}

// ParseHook provides a mock function with given fields: _a0, _a1
func (_m *MockClient) ParseHook(_a0 *http.Request, _a1 []byte) (vcs.PullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ParseHook")
	}

	var r0 vcs.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, []byte) (vcs.PullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, []byte) vcs.PullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(vcs.PullRequest)
	}

	if rf, ok := ret.Get(1).(func(*http.Request, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ParseHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseHook'
type MockClient_ParseHook_Call struct {
	*mock.Call
}

// ParseHook is a helper method to define mock.On call
//   - _a0 *http.Request
//   - _a1 []byte
func (_e *MockClient_Expecter) ParseHook(_a0 interface{}, _a1 interface{}) *MockClient_ParseHook_Call {
	return &MockClient_ParseHook_Call{Call: _e.mock.On("ParseHook", _a0, _a1)}
}

func (_c *MockClient_ParseHook_Call) Run(run func(_a0 *http.Request, _a1 []byte)) *MockClient_ParseHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].([]byte))
	})
	return _c
}

func (_c *MockClient_ParseHook_Call) Return(_a0 vcs.PullRequest, _a1 error) *MockClient_ParseHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ParseHook_Call) RunAndReturn(run func(*http.Request, []byte) (vcs.PullRequest, error)) *MockClient_ParseHook_Call {
	_c.Call.Return(run)
	return _c
}

// PostMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClient) PostMessage(_a0 context.Context, _a1 vcs.PullRequest, _a2 string) *msg.Message {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PostMessage")
	}

	var r0 *msg.Message
	if rf, ok := ret.Get(0).(func(context.Context, vcs.PullRequest, string) *msg.Message); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Message)
		}
	}

	return r0
}

// MockClient_PostMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMessage'
type MockClient_PostMessage_Call struct {
	*mock.Call
}

// PostMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 vcs.PullRequest
//   - _a2 string
func (_e *MockClient_Expecter) PostMessage(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockClient_PostMessage_Call {
	return &MockClient_PostMessage_Call{Call: _e.mock.On("PostMessage", _a0, _a1, _a2)}
}

func (_c *MockClient_PostMessage_Call) Run(run func(_a0 context.Context, _a1 vcs.PullRequest, _a2 string)) *MockClient_PostMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vcs.PullRequest), args[2].(string))
	})
	return _c
}

func (_c *MockClient_PostMessage_Call) Return(_a0 *msg.Message) *MockClient_PostMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_PostMessage_Call) RunAndReturn(run func(context.Context, vcs.PullRequest, string) *msg.Message) *MockClient_PostMessage_Call {
	_c.Call.Return(run)
	return _c
}

// TidyOutdatedComments provides a mock function with given fields: _a0, _a1
func (_m *MockClient) TidyOutdatedComments(_a0 context.Context, _a1 vcs.PullRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TidyOutdatedComments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vcs.PullRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_TidyOutdatedComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TidyOutdatedComments'
type MockClient_TidyOutdatedComments_Call struct {
	*mock.Call
}

// TidyOutdatedComments is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 vcs.PullRequest
func (_e *MockClient_Expecter) TidyOutdatedComments(_a0 interface{}, _a1 interface{}) *MockClient_TidyOutdatedComments_Call {
	return &MockClient_TidyOutdatedComments_Call{Call: _e.mock.On("TidyOutdatedComments", _a0, _a1)}
}

func (_c *MockClient_TidyOutdatedComments_Call) Run(run func(_a0 context.Context, _a1 vcs.PullRequest)) *MockClient_TidyOutdatedComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vcs.PullRequest))
	})
	return _c
}

func (_c *MockClient_TidyOutdatedComments_Call) Return(_a0 error) *MockClient_TidyOutdatedComments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_TidyOutdatedComments_Call) RunAndReturn(run func(context.Context, vcs.PullRequest) error) *MockClient_TidyOutdatedComments_Call {
	_c.Call.Return(run)
	return _c
}

// ToEmoji provides a mock function with given fields: _a0
func (_m *MockClient) ToEmoji(_a0 pkg.CommitState) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToEmoji")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(pkg.CommitState) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_ToEmoji_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToEmoji'
type MockClient_ToEmoji_Call struct {
	*mock.Call
}

// ToEmoji is a helper method to define mock.On call
//   - _a0 pkg.CommitState
func (_e *MockClient_Expecter) ToEmoji(_a0 interface{}) *MockClient_ToEmoji_Call {
	return &MockClient_ToEmoji_Call{Call: _e.mock.On("ToEmoji", _a0)}
}

func (_c *MockClient_ToEmoji_Call) Run(run func(_a0 pkg.CommitState)) *MockClient_ToEmoji_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pkg.CommitState))
	})
	return _c
}

func (_c *MockClient_ToEmoji_Call) Return(_a0 string) *MockClient_ToEmoji_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ToEmoji_Call) RunAndReturn(run func(pkg.CommitState) string) *MockClient_ToEmoji_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClient) UpdateMessage(_a0 context.Context, _a1 *msg.Message, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *msg.Message, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_UpdateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMessage'
type MockClient_UpdateMessage_Call struct {
	*mock.Call
}

// UpdateMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *msg.Message
//   - _a2 string
func (_e *MockClient_Expecter) UpdateMessage(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockClient_UpdateMessage_Call {
	return &MockClient_UpdateMessage_Call{Call: _e.mock.On("UpdateMessage", _a0, _a1, _a2)}
}

func (_c *MockClient_UpdateMessage_Call) Run(run func(_a0 context.Context, _a1 *msg.Message, _a2 string)) *MockClient_UpdateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*msg.Message), args[2].(string))
	})
	return _c
}

func (_c *MockClient_UpdateMessage_Call) Return(_a0 error) *MockClient_UpdateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_UpdateMessage_Call) RunAndReturn(run func(context.Context, *msg.Message, string) error) *MockClient_UpdateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Username provides a mock function with given fields:
func (_m *MockClient) Username() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Username")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_Username_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Username'
type MockClient_Username_Call struct {
	*mock.Call
}

// Username is a helper method to define mock.On call
func (_e *MockClient_Expecter) Username() *MockClient_Username_Call {
	return &MockClient_Username_Call{Call: _e.mock.On("Username")}
}

func (_c *MockClient_Username_Call) Run(run func()) *MockClient_Username_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Username_Call) Return(_a0 string) *MockClient_Username_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Username_Call) RunAndReturn(run func() string) *MockClient_Username_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyHook provides a mock function with given fields: _a0, _a1
func (_m *MockClient) VerifyHook(_a0 *http.Request, _a1 string) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VerifyHook")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_VerifyHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyHook'
type MockClient_VerifyHook_Call struct {
	*mock.Call
}

// VerifyHook is a helper method to define mock.On call
//   - _a0 *http.Request
//   - _a1 string
func (_e *MockClient_Expecter) VerifyHook(_a0 interface{}, _a1 interface{}) *MockClient_VerifyHook_Call {
	return &MockClient_VerifyHook_Call{Call: _e.mock.On("VerifyHook", _a0, _a1)}
}

func (_c *MockClient_VerifyHook_Call) Run(run func(_a0 *http.Request, _a1 string)) *MockClient_VerifyHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *MockClient_VerifyHook_Call) Return(_a0 []byte, _a1 error) *MockClient_VerifyHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_VerifyHook_Call) RunAndReturn(run func(*http.Request, string) ([]byte, error)) *MockClient_VerifyHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
